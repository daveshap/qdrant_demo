An intuitive understanding of each fold of a nested cross validation for parameter/model tuning There are several questions on this site essentially asking how nested cross validation for parameter tuning works. A lot of the answers use some jargon that I find difficult to understand, but as far as I can tell, the intuitive understanding of nested cross validation I have developed is as follows:In standard cross validation, if you have 8 \"runs\you will train a classifier on 7 runs and test on the remaining one. You do this 8 times, such that each run is the \"testing set\" once (therefore, 8-fold cross validation)In nested cross validation, the training set is itself subjected to a cross validation with a 6-run training set and a 1-run validation set (and therefore has its own 7 \"inner folds\"). You can test many different parameter combinations, kernel functions, feature selection methods, etc by training the 6-run training sets with them and testing on the 1-run validation set. You repeat so that every set takes a turn as the validation set as in normal cross validation. After all combinations of models are tested via this \"inner\" cross validation, you can select the best-performing model across all inner folds and now train the entire 7-run training set with the selected model and test with the original testing set that has not been touched by the inner loop.One fold of the \"outer loop\" (and seven folds of the \"inner loop\" inside the outer loop) has just been described. Now you do it all again, with each fold taking turns as the \"testing\" set waiting in the outer loop.The above is what I understand nested cross validation to be. I have one general question and one specific question.In a broad sense, have I misunderstood anything obvious?What I just described could potentially yield different models for each \"outer fold\" of the data (aka different parameter selections, feature selections, etc). Is that valid/correct? It doesn't /feel/ valid to me. If not valid, then am I supposed to instead do all the inner loops first without doing a single outer loop, find the overall best model, and then run all 8 outer folds with the same model?