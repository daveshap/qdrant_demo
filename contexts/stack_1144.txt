Using RDBMS with pseudo foreign keys VS using NoSQL solutions According to some database administrators for our org, it is generally not advisable to actually enforce foreign-key relations within our MySQL DBs. Instead, it is preferred to simply represent this with a pseudo foreign-key ID column and to instead perform extra application processing for the foreign-key coercion. The reason is that inserts and deletes (especially cascading ones) become prohibitively expensive as the database scales out.But does this not defeat the purpose of a RBDMS to begin with? From what I understand, it seems that one of the biggest reasons to use a RBDMS to begin with (besides enforcing ACID properties) is to ensure application query processing involving related (i.e. bound by junction tables via FKs) objects are minimized. Is it in general more practical to utilize pseudo foreign-keys with additional application processing then? And, if so, why would you even want to use an RBDMS? I presume the reason would be that the application processing would still be slightly less (and way more straightforward) than a NoSQL solution?